configfile: "config.yaml"

rule all:
    input:
        "qm/aceh.pkl",
        "clusters/cluster_info.json"  # hypothetical final output

rule setup_residue:
    output: "psf/aceh.rtf"  # Example file
    shell:
        "python ~/mmml/mmml/pycharmm_interface/setupRes.py -r {config[residue]}"

rule setup_box:
    input: "psf/aceh.rtf"
    output: "pdb/init-packmol.pdb"
    shell:
        "python ~/mmml/mmml/pycharmm_interface/setupBox.py -d {config[density]} -l {config[side_length]} -r {config[residue]}"

rule run_qm:
    input: "xyz/aceh.xyz"
    output: "qm/aceh.pkl"
    shell:
        """
        python ~/mmml/mmml/pyscf4gpuInterface/calcs.py \
        --output {output} --mol {input} \
        --optimize --xc {config[qm][xc]} --basis {config[qm][basis]} \
        {('--hessian' if config[qm]['hessian'] else '')} \
        {('--thermo' if config[qm]['thermo'] else '')} \
        {('--gradient' if config[qm]['gradient'] else '')} \
        {('--harmonic' if config[qm].get('harmonic', False) else '')}
        """

rule run_md:
    input:
        psf="psf/system.psf",
        pdb="pdb/init-packmol.pdb"
    output: directory("dcd/")
    shell:
        """
        python openmm-test1.py \
        --psf_file {input.psf} --pdb_file {input.pdb} \
        --working_dir {wildcards.wd} \
        --temperatures {" ".join(map(str, config['md']['temperatures']))} \
        --pressures {" ".join(map(str, config['md']['pressures']))} \
        --simulation_schedule {" ".join(config['md']['schedule'])} \
        --integrator {config['md']['integrator']}
        """

rule extract_clusters:
    input:
        dcd="dcd/npt_20250417_150052.dcd",  # This would be auto-generated
        psf="psf/system.psf",
        pdb="pdb/initial.pdb",
        log="res/npt_20250417_150052.log"
    output: "clusters/cluster_info.json"
    shell:
        """
        python ~/mmml/mmml/sample/features.py \
        --sims_path $PWD --start 0 --end 100 --samples_per_frame 1 \
        --n_find {config[cluster][n_find]} \
        --psf {input.psf} --dcd {input.dcd} \
        --stride {config[cluster][stride]} --logfile {input.log} \
        --pdb {input.pdb} --output {output}
        """