configfile: "config.yaml"

rule all:
    input:
        "qm/initial.npz",
        "clusters/cluster_info.json"

rule setup_residue:
    output: "setup-residue.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm openmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupRes.py -r {config[residue]} > {output}"

rule setup_box:
    input: "setup-residue.log"
    output: "setup-box.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupBox.py "
        "-d {config[density]} -l {config[side_length]} -r {config[residue]} > {output}"

rule run_qm:
    input: "setup-residue.log"
    output: "qm/initial.npz"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load cudnn && "
        "uv run python ~/mmml/mmml/pyscf4gpuInterface/calcs.py "
        "--output {output} --mol xyz/initial.xyz "
        "--optimize --xc {config[qm][xc]} --basis {config[qm][basis]} "
        "{' '.join(['--' + flag for flag, enabled in config['qm'].items() if enabled and flag in ['hessian', 'thermo', 'gradient', 'harmonic']])} "
        "> {output}"

rule run_md:
    input: "setup-box.log"
    output: "omm/openmm.json"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && module load openmm && "
        "python ~/mmml/mmml/openmmInterface/openmm-test1.py "
        "--psf_file psf/system.psf --pdb_file pdb/init-packmol.pdb "
        "--working_dir $PWD "
        "--temperatures {' '.join(map(str, config['md']['temperatures']))} "
        "--pressures {' '.join(map(str, config['md']['pressures']))} "
        "--simulation_schedule {' '.join(config['md']['schedule'])} "
        "--integrator {config['md']['integrator']}"

rule extract_clusters:
    input: "omm/openmm.json"
    output: "clusters/cluster_info.json"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "uv run ~/mmml/mmml/sample/features.py "
        "--sims_path $PWD --start 0 --end 100 --samples_per_frame 1 "
        "--n_find {config[cluster][n_find]} "
        "--psf {input.psf} --dcd {wildcards.dcd_file} "
        "--stride {config[cluster][stride]} --logfile {wildcards.log_file} "
        "--pdb pdb/initial.pdb --output {output}"
