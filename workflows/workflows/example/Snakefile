configfile: "config.yaml"

rule all:
    input:
        "qm/initial.npz",
        "clusters/cluster_info.json"

rule setup_residue:
    output: "setup-residue.log"
    shell:
        "python ~/mmml/mmml/pycharmm_interface/setupRes.py -r {config[residue]} > {output}"

rule setup_box:
    input: "setup-residue.log"
    output: "setup-box.log"
    shell:
        "python ~/mmml/mmml/pycharmm_interface/setupBox.py -d {config[density]} -l {config[side_length]} -r {config[residue]} > {output}"

rule run_qm:
    input: "setup-residue.log"
    output: "qm-initial.npz"
    shell:
        """
        python ~/mmml/mmml/pyscf4gpuInterface/calcs.py \
            --output {output} --mol initial.xyz \
            --optimize --xc {config[qm][xc]} --basis {config[qm][basis]} \
            {('--hessian' if config[qm]['hessian'] else '')} \
            {('--thermo' if config[qm]['thermo'] else '')} \
            {('--gradient' if config[qm]['gradient'] else '')} \
            {('--harmonic' if config[qm].get('harmonic', False) else '')} > {output}
        """

rule run_md:
    input: "setup-box.log"
    output: "omm/openmm.json"
    shell:
        """
        python openmm-test1.py \
            --psf_file psf/system.psf --pdb_file pdb/init-packmol.pdb \
            --working_dir $PWD \
            --temperatures {" ".join(map(str, config['md']['temperatures']))} \
            --pressures {" ".join(map(str, config['md']['pressures']))} \
            --simulation_schedule {" ".join(config['md']['schedule'])} \
            --integrator {config['md']['integrator']}
        """

rule extract_clusters:
    input: "omm/openmm.json"
    output: "clusters/cluster_info.json"
    run:
        import json as js
        from pathlib import Path

        with open(input.json) as f:
            data = js.load(f)

        dcd_file = data["dcd_files"][0]
        log_file = data["report_files"][0]
        pdb_file = "pdb/initial.pdb"

        shell(f"""
        python ~/mmml/mmml/sample/features.py \
            --sims_path $PWD --start 0 --end 100 --samples_per_frame 1 \
            --n_find {config["cluster"]["n_find"]} \
            --psf {input.psf} --dcd {dcd_file} \
            --stride {config["cluster"]["stride"]} --logfile {log_file} \
            --pdb {pdb_file} --output {output}
        """)
