configfile: "config.yaml"

rule all:
    input:
        "qm/initial.npz",
        "clusters.dat",
        "qm-clusters.log"

rule setup_residue:
    output: "xyz/initial.xyz"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm openmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupRes.py -r {config[residue]} > setupres.log"

rule setup_box:
    input: "xyz/initial.xyz"
    output: "setup-box.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupBox.py "
        "-d {config[density]} -l {config[side_length]} -r {config[residue]} > {output}"

rule run_qm:
    input: "setup-box.log"
    output: "qm/initial.npz"
    run:
        flags = [
            f"--{flag}"
            for flag, enabled in config["qm"].items()
            if enabled and flag in ["hessian", "thermo", "gradient", "harmonic"]
        ]
        flags_str = " ".join(flags)

        shell(
            f"""hostname &&
            bash ~/mmml/setup/install.sh &&
            module load cudnn && CUDA_DEVICES="0" uv run python ~/mmml/mmml/pyscf4gpuInterface/calcs.py --output qm/initial.npz --mol xyz/initial.xyz --optimize --xc {config['qm']['xc']} --basis {config['qm']['basis']} {flags_str} > qm/qm-initial.log   """
        )

rule run_md:
    input: "qm/initial.npz"
    output:
        json="omm/openmm.json",
        log="openmm-md.log"
    run:
        temps = " ".join(map(str, config['md']['temperatures']))
        press = " ".join(map(str, config['md']['pressures']))
        sched = " ".join(config['md']['schedule'])
        integrator = config['md']['integrator']
        steps = config['md']['steps']
        shell(
            f"""hostname && module purge && module load openmm && CUDA_VISIBLE_DEVICES="0" python ~/mmml/mmml/openmmInterface/openmm-test1.py --psf_file psf/system.psf --pdb_file pdb/init-packmol.pdb --steps {steps} --working_dir $PWD --temperatures {temps} --pressures {press} --simulation_schedule {sched} --integrator {integrator} > openmm-md.log""")


rule setup_water_box:
    input: "xyz/initial.xyz"
    output: "setup-water-box.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupBox.py "
        "-d {config[density]} -l {config[side_length]} -r {config[residue]} -s water > {output}"    

rule setup_octanol_box:
    input: "xyz/initial.xyz"
    output: "setup-octanol-box.log"
    resources:  
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupBox.py "
        "-d {config[density]} -l {config[side_length]} -r {config[residue]} -s octanol > {output}"

rule run_water_md:
    input: "openmm-md.log"
    output: "openmm-md-water.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    run:
        temps = " ".join(map(str, config['md']['temperatures']))
        press = " ".join(map(str, config['md']['pressures']))
        sched = " ".join(config['md']['schedule'])
        integrator = config['md']['integrator']
        steps = config['md']['steps']
        shell(
            f"""hostname && module purge && module load openmm && CUDA_VISIBLE_DEVICES=0 python ~/mmml/mmml/openmmInterface/openmm-test1.py --psf_file psf/system-water.psf --pdb_file pdb/init-waterbox.pdb --steps {steps} --working_dir $PWD --temperatures {temps} --pressures {press} --simulation_schedule {sched} --integrator {integrator} > openmm-md-water.log"""
        )

rule run_octanol_md:
    input: "openmm-md-water.log"
    output: "openmm-md-octanol.log"
    resources:
        partition="gpu",
        gres="gpu:1"        
    run:
        temps = " ".join(map(str, config['md']['temperatures']))
        press = " ".join(map(str, config['md']['pressures']))
        sched = " ".join(config['md']['schedule'])
        integrator = config['md']['integrator']
        steps = config['md']['steps']
        shell(
            f"""hostname && module purge && module load openmm && CUDA_VISIBLE_DEVICES=0 python ~/mmml/mmml/openmmInterface/openmm-test1.py --psf_file psf/system-octanol.psf --pdb_file pdb/init-octanolbox.pdb --steps {steps} --working_dir $PWD --temperatures {temps} --pressures {press} --simulation_schedule {sched} --integrator {integrator} > openmm-md-octanol.log"""
        )   

rule extract_clusters:
    input: 
        "openmm-md-water.log",
        "openmm-md-octanol.log",
        "openmm-md.log"
    output: "clusters.dat"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "for i in $(seq 0 100 1000); do "
        "hostname && bash ~/mmml/setup/install.sh && "
        "uv run ~/mmml/mmml/sample/features.py "
        "--sims_path $PWD --start $i --end $((i+100)) --samples_per_frame 1 "
        "--n_find {config[cluster][n_find]} "
        "--psf psf/system.psf --dcd dcd/*.dcd "
        "--stride {config[cluster][stride]} --logfile res/*.log "
        "--pdb pdb/initial.pdb --output {output} > clusters.log && ls md_sampling/*/xyz/*xyz > clusters.dat; done"


rule qm_clusters:
    input: "clusters.dat"
    output: "qm-clusters.log"
    
    run:
        flags = [
            f"--{flag}"
            for flag, enabled in config["qm"].items()
            if enabled and flag in [ "gradient", ]
        ]
        flags_str = " ".join(flags)

        shell(
            f"""hostname &&
            bash ~/mmml/setup/install.sh &&
            module load cudnn && while read XYZ; do CUDA_DEVICES="0" uv run python ~/mmml/mmml/pyscf4gpuInterface/calcs.py --output $XYZ.npz --mol $XYZ  --xc {config['qm']['xc']} --basis {config['qm']['basis']} {flags_str} > $XYZ.log; done < {input} && ls md_sampling/*/xyz/*npz > qm-clusters.log """
        )

rule train_model_1:
    input: "qm/clusters.npz"
    output: "train_model_1.log"
    run:
        "uv run ~/mmml/mmml/models/train_model_1.py --input qm/clusters.npz --output models/model_1.pth"


