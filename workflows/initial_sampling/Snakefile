configfile: "config.yaml"

def get_n_total_minus_1(config):
    return config["md"]["steps"]//1000 - 1

def get_n_per_batch(config):
    return config["md"]["steps"]//10000

rule all:
    input:
        "qm/initial.npz",
        "clusters-bulk.dat",
        "clusters-water.dat",
        "clusters-octanol.dat"

##################################
# Setup
##################################

rule setup_residue:
    output: "xyz/initial.xyz"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm openmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupRes.py -r {config[residue]} > setupres.log"

##################################
# BULK
##################################

rule setup_box:
    input: "xyz/initial.xyz"
    output: "setup-box.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupBox.py "
        "-d {config[density]} -l {config[side_length]} -r {config[residue]} > {output}"

rule run_qm:
    input: "setup-box.log"
    output: "qm/initial.npz"
    run:
        flags = [
            f"--{flag}"
            for flag, enabled in config["qm"].items()
            if enabled and flag in ["hessian", "thermo", "gradient", "harmonic"]
        ]
        flags_str = " ".join(flags)

        shell(
            f"""hostname &&
            bash ~/mmml/setup/install.sh &&
            module load cudnn && CUDA_DEVICES="0" uv run python ~/mmml/mmml/pyscf4gpuInterface/calcs.py --output qm/initial.npz --mol xyz/initial.xyz --optimize --xc {config['qm']['xc']} --basis {config['qm']['basis']} {flags_str} > qm/qm-initial.log   """
        )


rule run_md:
    input: "qm/initial.npz"
    output:
        json="omm/openmm.json",
        log="openmm-md.log"
    run:
        temps = " ".join(map(str, config['md']['temperatures']))
        press = " ".join(map(str, config['md']['pressures']))
        sched = " ".join(config['md']['schedule'])
        integrator = config['md']['integrator']
        steps = config['md']['steps']
        shell(
            f"""hostname && module purge && module load openmm && CUDA_VISIBLE_DEVICES="0" python ~/mmml/mmml/openmmInterface/openmm-sampling.py --psf_file psf/system.psf --pdb_file pdb/init-packmol.pdb --steps {steps} --working_dir $PWD --temperatures {temps} --pressures {press} --simulation_schedule {sched} --integrator {integrator} --tag bulk > openmm-md.log""")

rule extract_clusters:
    input: 
        "openmm-md.log"
    output: "clusters-bulk.dat"
    resources:
        partition="gpu",
        gres="gpu:1"
    run:
        n_per_batch = get_n_per_batch()
        n_total_minus_1 = get_n_total_minus_1()
        n_find = config["cluster"]["n_find"]
        stride = config["cluster"]["stride"]
        output_file = output[0]

        shell(r"""
        for i in $(seq 0 {n_per_batch} {n_total_minus_1}); do
            hostname && bash ~/mmml/setup/install.sh &&
            uv run ~/mmml/mmml/sample/features.py \
                --sims_path "$PWD" --start $i --end $((i+{n_per_batch})) --samples_per_frame 1 \
                --n_find {n_find} \
                --psf psf/system.psf --dcd dcd/bulk.dcd \
                --stride {stride} --logfile res/bulk.log \
                --pdb pdb/init-packmol.pdb --output {output_file} > clusters-bulk.log &&
            ls md_sampling/*/xyz/*bulk.xyz > {output_file}
        done
        """.format(
            n_per_batch=n_per_batch,
            n_total_minus_1=n_total_minus_1,
            n_find=n_find,
            stride=stride,
            output_file=output_file
        ))
##################################
# WATER
##################################

rule setup_water_box:
    input: "openmm-md.log"
    output: "setup-water-box.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupBox.py "
        "-d {config[density]} -l {config[side_length]} -r {config[residue]} -s water > {output}"    

rule run_water_md:
    input: "setup-water-box.log"
    output: "openmm-md-water.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    run:
        temps = " ".join(map(str, config['md']['temperatures']))
        press = " ".join(map(str, config['md']['pressures']))
        sched = " ".join(config['md']['schedule'])
        integrator = config['md']['integrator']
        steps = config['md']['steps']
        shell(
            f"""hostname && module purge && module load openmm && CUDA_VISIBLE_DEVICES=0 python ~/mmml/mmml/openmmInterface/openmm-sampling.py --psf_file psf/system-water.psf --pdb_file pdb/init-waterbox.pdb --steps {steps} --working_dir $PWD --temperatures {temps} --pressures {press} --simulation_schedule {sched} --integrator {integrator} --tag water > openmm-md-water.log"""
        )

rule extract_clusters_water:
    input: 
        "openmm-md-water.log"
    output: "clusters-water.dat"
    resources:
        partition="gpu",
        gres="gpu:1"    
    run:
        n_per_batch = get_n_per_batch()
        n_total_minus_1 = get_n_total_minus_1()
        n_find = config["cluster"]["n_find"]
        stride = config["cluster"]["stride"]
        output_file = output[0]

        shell(r"""
        for i in $(seq 0 {n_per_batch} {n_total_minus_1}); do
            hostname && bash ~/mmml/setup/install.sh &&
            uv run ~/mmml/mmml/sample/features.py \
                --sims_path "$PWD" --start $i --end $((i+{n_per_batch})) --samples_per_frame 1 \
                --n_find {n_find} \
                --psf psf/system-water.psf --dcd dcd/water.dcd \
                --stride {stride} --logfile res/water.log \
                --pdb pdb/init-waterbox.pdb --output {output_file} > clusters-water.log &&
            ls md_sampling/*/xyz/*water.xyz > {output_file}
        done
        """.format(
            n_per_batch=n_per_batch,
            n_total_minus_1=n_total_minus_1,
            n_find=n_find,
            stride=stride,
            output_file=output_file
        ))

##################################
# OCTANOL
##################################

rule setup_octanol_box:
    input: "clusters-water.dat"
    output: "setup-octanol-box.log"
    resources:
        partition="gpu",
        gres="gpu:1"
    shell:
        "hostname && bash ~/mmml/setup/install.sh && "
        "module load charmm && "
        "uv run ~/mmml/mmml/pycharmm_interface/setupBox.py "
        "-d {config[density]} -l {config[side_length]} -r {config[residue]} -s octanol > {output}"   

rule run_octanol_md:
    input: "setup-octanol-box.log"
    output: "openmm-md-octanol.log"
    resources:
        partition="gpu",
        gres="gpu:1"        
    run:
        temps = " ".join(map(str, config['md']['temperatures']))
        press = " ".join(map(str, config['md']['pressures']))
        sched = " ".join(config['md']['schedule'])
        integrator = config['md']['integrator']
        steps = config['md']['steps']
        shell(
            f"""hostname && module purge && module load openmm && CUDA_VISIBLE_DEVICES=0 python ~/mmml/mmml/openmmInterface/openmm-sampling.py --psf_file psf/system-octanol.psf --pdb_file pdb/init-octanolbox.pdb --steps {steps} --working_dir $PWD --temperatures {temps} --pressures {press} --simulation_schedule {sched} --integrator {integrator} --tag octanol > openmm-md-octanol.log"""
        )   



rule extract_clusters_octanol:
    input: 
        "openmm-md-octanol.log"
    output: "clusters-octanol.dat"
    resources:
        partition="gpu",
        gres="gpu:1"
    run:
        n_per_batch = get_n_per_batch()
        n_total_minus_1 = get_n_total_minus_1()
        n_find = config["cluster"]["n_find"]
        stride = config["cluster"]["stride"]
        output_file = output[0]

        shell(r"""
        for i in $(seq 0 {n_per_batch} {n_total_minus_1}); do
            hostname && bash ~/mmml/setup/install.sh &&
            uv run ~/mmml/mmml/sample/features.py \
                --sims_path "$PWD" --start $i --end $((i+{n_per_batch})) --samples_per_frame 1 \
                --n_find {n_find} \
                --psf psf/system-octanol.psf --dcd dcd/octanol.dcd \
                --stride {stride} --logfile res/octanol.log \
                --pdb pdb/init-octanolbox.pdb --output {output_file} > clusters-octanol.log &&
            ls md_sampling/*/xyz/*octanol.xyz > {output_file}
        done
        """.format(
            n_per_batch=n_per_batch,
            n_total_minus_1=n_total_minus_1,
            n_find=n_find,
            stride=stride,
            output_file=output_file
        ))