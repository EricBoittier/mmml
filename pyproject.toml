[build-system]
requires = ["setuptools>=61.0", "wheel", "versioningit~=2.0"]
build-backend = "setuptools.build_meta"

[project]
name = "mmml"
description = "Molecular Mechanics and Machine Learned Force Fields"
dynamic = ["version"]
readme = "README.md"
authors = [
    { name = "Eric Boittier", email = "eric.boittier@icloud.com" }
]
license = { text = "MIT" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.11,<3.13"

# Core dependencies - minimal set required for basic functionality
dependencies = [
    # Core scientific computing
    "numpy",
    "scipy",
    "pandas",
    "matplotlib>=3.5.0",
    
    # JAX ecosystem (CPU version by default)
    "jax",
    "jaxlib",
    "jax-md",
    "dm-haiku",
    "flax",
    "optax",
    "chex",
    "jaxtyping",
    "jmp",
    "jraph",
    "orbax-checkpoint",
    
    # ML utilities
    "ml-dtypes",
    "ml-collections",
    "einops",
    
    # Chemistry core
    "ase",
    "pyyaml",
    
    # Hydra configuration
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    
    # Utilities
    "tqdm",
    "rich",
    "tabulate",
    "typing-extensions",
]

[project.optional-dependencies]
# Interfaces and optional integrations
charmm-interface = [
    # Install `pycharmm` separately from a compatible source (local build or wheel)
    # before enabling this extra.
    "pycharmm",
]
# GPU/CUDA support (CUDA 12)
# Note: JAX with CUDA requires installation from specific index
# Install with: pip install -e ".[gpu]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html
gpu = [
    "jax[cuda12]>=0.4.20",
    "jaxlib[cuda12]>=0.4.20",
    "cupy-cuda12x>=13.0.0",
    "cutensor-cu12>=2.0.0",
]

# Quantum chemistry calculations
quantum = [
    "pyscf>=2.8.0",
    "basis-set-exchange>=0.11",
    "pyscf-dispersion>=1.3.0",
    "geometric>=1.1.0",
    "dscribe",
]

# GPU-accelerated quantum chemistry
quantum-gpu = [
    "mmml[quantum]",
    "gpu4pyscf-cuda12x",
    "gpu4pyscf-libxc-cuda12x",
]

# Machine learning extras
ml = [
    "torch",
    "torchani",
    "e3nn-jax",
    "e3x",
    "lovely-jax",
]

# Visualization and plotting
viz = [
    "plotly",
    "plotnine",
    "seaborn",
    "scienceplots",
    "cmcrameri",
    "patchworklib>=0.6.0",
    "py3dmol",
    "ipyvolume",
    "pyvolume",
]

# Molecular dynamics and analysis
md = [
    "mdanalysis",
    "mda-xdrlib",
    "mmtf-python",
    "griddataformats",
    "mrcfile",
]

# Chemistry tools
chem = [
    "chemcoord",
    "pubchempy",
    "pyxtal",
    "molzip",
    "sphynx>=0.0.3",
]

# Data processing
data = [
    "polars",
    "pyarrow",
    "fastparquet",
]

# Jupyter notebook support
notebooks = [
    "ipykernel",
    "ipython",
    "jupyter-client",
    "jupyter-core",
    "nbformat",
]

# Experiment tracking and optimization
experiments = [
    "wandb>=0.15.0",
    "hydra-optuna-sweeper>=1.2.0",
]

# Development and testing
dev = [
    "pytest>=6.1.2",
    "ipykernel>=6.30.1",
]

# Full installation with all optional dependencies
all = [
    "mmml[gpu,quantum,quantum-gpu,ml,viz,md,chem,data,notebooks,experiments]",
]

# CPU-only full installation (no GPU dependencies)
all-cpu = [
    "mmml[quantum,ml,viz,md,chem,data,notebooks,experiments]",
]

[tool.uv.sources]
jax-md = { git = "https://github.com/google/jax-md.git", rev = "05221c551e71f1b5f64458c0e3533452c22efec0" }
pycharmm = { path = "setup/charmm/tool/pycharmm", editable = true }

[[tool.uv.index]]
name = "jax-cuda"
url = "https://storage.googleapis.com/jax-releases/jax_cuda_releases.html"
explicit = true

[tool.setuptools]
zip-safe = false
include-package-data = false

[tool.setuptools.packages.find]
namespaces = false
where = ["."]

[tool.setuptools.package-data]
mmml = ["py.typed"]

[tool.versioningit]
default-version = "1+unknown"

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

[tool.versioningit.vcs]
method = "git"
match = ["*"]
default-tag = "1.0.0"

[tool.versioningit.write]
file = "mmml/_version.py"
