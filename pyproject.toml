[build-system]
requires = ["setuptools>=61.0", "wheel", "versioningit~=2.0"]
build-backend = "setuptools.build_meta"

# Self-descriptive entries which should always be present
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
[project]
name = "mmml"
description = "Molecular Mechanics and Machine Learned Force Fields"
dynamic = ["version"]
readme = "README.md"
authors = [
    { name = "Eric Boittier", email = "eric.boittier@icloud.com" }
]
license = { text = "MIT" }
# See https://pypi.org/classifiers/
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.11,<3.13"
# Declare any run-time dependencies that should be installed with the package.
dependencies = [
    "molzip",
    "pytest",
    "jsonpickle",
    "absl-py",
    "asciichartpy",
    "ase",
    "asttokens",
    "attrs",
    "chex",
    "chemcoord",
    "comm",
    "contextlib2",
    "contourpy",
    "cycler",
    "Cython",
    "dataclasses",
    "debugpy",
    "decorator",
    "dill",
    "dm-haiku",
    "dscribe",
    "e3nn-jax",
    "e3x",
    "einops",
    "etils",
    "executing",
    "fasteners",
    "fastparquet",
    "flax",
    "flexcache",
    "flexparser",
    "fonttools",
    "frozendict",
    "fsspec",
    "griddataformats",
    #"cutensor-cu12==2.2.0",
    #"gpu4pyscf-libxc-cuda12x==0.5.0",
    #"cupy-cuda12x==13.4.1",
    "pyscf==2.8.0",
    "basis-set-exchange==0.11",
    "pyscf-dispersion==1.3.0",
    #"geometric==1.1.0",
    #"gpu4pyscf-cuda12x",
    "humanize",
    "importlib-resources",
    "ipykernel",
    "ipython",
    "ipython_genutils",
    "ipyvolume",
    "jaxtyping",
    "jax[cuda12]",
    "jax-md",
    "jaxlib",
    "jedi",
    "jmp",
    "joblib",
    "jraph",
    "jupyter-client",
    "jupyter-core",
    "kiwisolver",
    "lovely-jax",
    "markdown-it-py",
    "matplotlib",
    "matplotlib-inline",
    "mda-xdrlib",
    "mdanalysis",
    "mdurl",
    "mizani",
    "ml-dtypes",
    "ml-collections",
    "mmtf-python",
    "more-itertools",
    "mpmath",
    "mrcfile",
    "msgpack",
    "nbformat",
    "nest-asyncio",
    "networkx",
    "numpy",
    #"openff-toolkit",
    #"openmm[cuda12]",
    #"openmm-cuda-12",
    #"openmmml",
    "opt-einsum",
    "optax",
    "orbax-checkpoint",
    "packaging",
    "pandas",
    "parso",
    "patchworklib",
    "patsy",
    "pexpect",
    "pillow",
    "pint",
    "platformdirs",
    "plotly",
    "plotnine",
    "protobuf",
    "psutil",
    "ptyprocess",
    "pubchempy",
    "pure-eval",
    "py3dmol",
    "pyscf",
    "pyarrow",
    "pygments",
    "pyparsing",
    "python-dateutil",
    "pytz",
    "pyvolume",
    "pyyaml",
    "pyzmq",
    #"rdkit",
    "rich",
    "scikit-image",
    "scikit-learn",
    "scipy",
    "seaborn",
    "setuptools",
    "six",
    "stack-data",
    "statsmodels",
    "sympy",
    "tabulate",
    #"tensorstore",
    #"tensorflow",
    "threadpoolctl",
    "toml",
    "toolz",
    "topsearch",
    "torch",
    "torchani",
    "tornado",
    "tqdm",
    "traitlets",
    "typeguard",
    "typing-extensions",
    "tzdata",
    "wcwidth",
    "wheel",
    "zipp",
    "pycharmm",
    #"xtb_ase",
    "pyxtal",
    "polars",
    "sphynx>=0.0.3",
]

[tool.uv.sources]
#xtb_ase = { git = "https://github.com/Quantum-Accelerators/xtb_ase.git"}
jax-md = { git = "https://github.com/google/jax-md.git", rev = "05221c551e71f1b5f64458c0e3533452c22efec0" }
pycharmm = { path = "setup/charmm/tool/pycharmm" }

# Update the urls once the hosting is set up.
#[project.urls]
#"Source" = "https://github.com/<username>/mmml/"
#"Documentation" = "https://mmml.readthedocs.io/"

[project.optional-dependencies]
test = [
  "pytest>=6.1.2",
]

[tool.setuptools]
# This subkey is a beta stage development and keys may change in the future, see https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html for more details
#
# As of version 0.971, mypy does not support type checking of installed zipped
# packages (because it does not actually import the Python packages).
# We declare the package not-zip-safe so that our type hints are also available
# when checking client code that uses our (installed) package.
# Ref:
# https://mypy.readthedocs.io/en/stable/installed_packages.html?highlight=zip#using-installed-packages-with-mypy-pep-561
zip-safe = false
# Let setuptools discover the package in the current directory,
# but be explicit about non-Python files.
# See also:
#   https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#setuptools-specific-configuration
# Note that behavior is currently evolving with respect to how to interpret the
# "data" and "tests" subdirectories. As of setuptools 63, both are automatically
# included if namespaces is true (default), even if the package is named explicitly
# (instead of using 'find'). With 'find', the 'tests' subpackage is discovered
# recursively because of its __init__.py file, but the data subdirectory is excluded
# with include-package-data = false and namespaces = false.
include-package-data = false
[tool.setuptools.packages.find]
namespaces = false
where = ["."]

# Ref https://setuptools.pypa.io/en/latest/userguide/datafiles.html#package-data
[tool.setuptools.package-data]
mmml = [
    "py.typed"
]

[tool.versioningit]
default-version = "1+unknown"

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

[tool.versioningit.vcs]
# The method key:
method = "git"  # <- The method name
# Parameters to pass to the method:
match = ["*"]
default-tag = "1.0.0"

[tool.versioningit.write]
file = "mmml/_version.py"

[dependency-groups]
dev = [
    "ipykernel>=6.30.1",
]
